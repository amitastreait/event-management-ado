# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: # equalant to push in Github action
  branches:
    include: # ENUM
      - feature/*
  paths:
    include:
      - force-app/*

# Pull Request Trigger
pr: 
 branches:
   include:
     - uat
 paths:
   include:
     - force-app/*
    

pool:
  vmImage: ubuntu-latest

variables:
  - group: uat
  - name: TEST_CLASS_LEVEL
    value: AccountTriggerTest

stages:
  - stage: SFBuild
    jobs:
      - job: SFBuild
        steps:
          - script: echo "SFBuild is running"
            displayName: Single Line Script
          - script: |
              echo $(SF_ALIAS)
              echo $(SF_CLIENT_ID)
              echo $(SF_INSTANCE_URL)
              echo $(SF_USER_NAME)
              echo $(System.DefaultWorkingDirectory)
              echo $(System.ArtifactStagingDirectory)
            displayName: MultiLine Script
  - stage: SFDeployANDValidate
    jobs:
      - job: SFValidate
        steps:
          - checkout: self
            fetchDepth: 0
            displayName: Checkout to correct commit
          - script: npm install -g @salesforce/cli
            displayName: Install Salesforce CI
          - script: sf --version
            displayName: Verify CLI Installation 
          - script: |
              echo 'y' | sf plugins install sfdx-git-delta
              sf plugins install @salesforce/sfdx-scanner
            displayName: Install Required Plugins
          # Download the Secure File
          - task: DownloadSecureFile@1
            name: commonSecureFile
            displayName: Download Secure File
            inputs:
              secureFile: 'server-uat.key' # Name of the secure file
          - script: |
              sf org login jwt --jwt-key-file $(commonSecureFile.secureFilePath) --username $(SF_USER_NAME) --client-id $(SF_CLIENT_ID) --set-default --alias $(SF_ALIAS) --instance-url $(SF_INSTANCE_URL)
            displayName: Authenticate with Salesforce
          - script: |
              sf apex run test --target-org $(SF_ALIAS) --test-level RunLocalTests --code-coverage --result-format human -d ./ --wait 10
            displayName: Run Local Tests
          # Salesforce Code analyzer
          - script: |
              mkdir scanner_reports
              sf scanner run --format html --target "force-app/main/default" --engine eslint,eslint-lwc,eslint-typescript,pmd,retire-js,cpd --category Design,Best Practices,Code Style,Performance,Security --outfile scanner_reports
            displayName: Run Salesforce Code analyzer
          # upload as an artifacts

          #1 Build Artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'My First Pipeline'
              publishLocation: 'Container'
              StoreAsTar: true
            displayName: Publish Build Artifacts
          #2 Pipeline Artifacts
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/scanner_reports'
              artifact: 'SF_CLI_REPORTS'
              publishLocation: 'pipeline'
            displayName: Publish SF CLI Scanner Reports

          # Generate the Delta for Delta Deployment
          - script: |
              mkdir delta
              # Generate Delta for deployment
              # https://github.com/scolladon/sfdx-git-delta
              sf sgd source delta --to "HEAD" --from "HEAD~1" --output-dir ./delta --generate-delta --ignore-whitespace --ignore-file .sgdignore
              cat ./delta/package/package.xml
              cat ./delta/destructiveChanges/destructiveChanges.xml
              ls -l ./delta
            displayName: Generate Delta for the Deployment
          
          - script: |
              if grep -q '<types>' delta/destructiveChanges/destructiveChanges.xml ; then
                echo "---- Validate Pre-Destructive Changes in Salesforce ----"
                sf project deploy start --target-org $(SF_ALIAS) --pre-destructive-changes delta/destructiveChanges/destructiveChanges.xml --manifest delta/destructiveChanges/package.xml --dry-run --wait 15
              else
                echo "---- No changes to validate ----"
              fi
            displayName: Validate Pre-Destructive Changes in Salesforce

          - script: |
              sf project deploy start --target-org $(SF_ALIAS) --source-dir force-ap --dry-run
            displayName: Validate the changes
      - job: SFDeploy
        steps:
          - script: echo "SFBuild is running"
            displayName: Single Line Script
          - script: |
              echo "Multiple line 1"
              echo "Multiple line 2"
            displayName: MultiLine Script
  - stage: SFTest
    jobs:
      - job: SFTest
        steps:
          - script: echo "SFBuild is running"
            displayName: Single Line Script
          - script: |
              echo "Multiple line 1"
              echo "Multiple line 2"
            displayName: MultiLine Script
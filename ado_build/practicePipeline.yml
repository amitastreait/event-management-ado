# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr:
  branches:
      include:
        - azure-pipelines
  paths:
    include:
      - force-app/*
      - ado_build/practicePipeline.yml

pool:
  vmImage: ubuntu-latest

variables:
  - group: uat
  - name: repoOwner
    value: "amitastreait"
  - name: repoName
    value: "event-management-ado"

stages:
  - stage: SFDeployANDValidate
    jobs:
      - job: SFValidate
        steps:
          - checkout: self
            fetchDepth: 0
            displayName: Checkout to correct commit

          # PREREQUISITES - Only needed if runner doesn't already satisfy these requirements
          - name: Ensure node v20 or greater
            uses: actions/setup-node@v4
            with:
              node-version: '>=20'
          - name: Ensure java v11 or greater
            uses: actions/setup-java@v4
            with:
              java-version: '>=11'
              distribution: 'zulu'
          - name: Ensure python v3.10 or greater
            uses: actions/setup-python@v5
            with:
              python-version: '>=3.10'

          # ðŸŸ¢ Fetch PR Description from GitHub API
          - task: PowerShell@2
            name: fetchPRBody
            displayName: "Fetch GitHub PR Description"
            inputs:
              targetType: 'inline'
              script: |
                  # Get the source branch name
                  $sourceBranch = "$(Build.SourceBranch)"  # Example: "refs/pull/13/merge"
                  # Define GitHub API URL
                  $prNumber = "$(System.PullRequest.PullRequestId)"
                  echo $prNumber

                  # Extract PR number using regex
                  if ($sourceBranch -match "refs/pull/(\d+)/merge") {
                      $githubPrNumber = $matches[1]
                  } else {
                      Write-Host "##vso[task.logissue type=error]Could not extract GitHub PR number"
                      exit 1
                  }
                  echo $githubPrNumber
                  $url = "https://api.github.com/repos/$(repoOwner)/$(repoName)/pulls/$githubPrNumber"
                  echo $url
                  # GitHub API authentication (Use GitHub PAT stored as a secret variable in ADO)
                  $headers = @{
                      Authorization = "Bearer $(GITHUB_PAT)"  # GITHUB_PAT should be stored securely in ADO
                      Accept = "application/vnd.github.v3+json"
                  }
                  # Fetch PR details
                  $response = Invoke-RestMethod -Uri $url -Method 'GET' -Headers $headers -ContentType "application/json"
                  # Extract PR description
                  $description = $response.body  # PR description
                  # Replace newlines to avoid truncation
                  $description = $description -replace "`r`n", " "  # Windows newlines
                  $description = $description -replace "`n", " "    # Unix newlines

                  echo $description

                  # Write PR body to file (handle newlines properly)
                  Set-Content -Path pr_body.txt -Value $description -Encoding UTF8

                  # Store PR description as a pipeline variable
                  Write-Host "##vso[task.setvariable variable=PR_BODY;isOutput=true]$description"
          
          # ðŸŸ¢ Display PR Body (for debugging)
          - script: |
              echo "$(fetchPRBody.PR_BODY)"
            displayName: GitHub Actions PR BODY

          # ðŸŸ¢ Extract Apex Test Classes using Python
          - task: PythonScript@0
            name: extractApex
            displayName: "Extract Apex Test Classes"
            inputs:
              scriptSource: 'filePath'
              scriptPath: 'PRBODY_TESTCLASS.py'
              arguments: 'pr_body.txt'   # âœ… Pass file instead of direct text

          # ðŸŸ¢ Use Extracted Apex Test Classes
          - script: |
              echo "Extracted Apex Classes: $(extractApex.APEX_CLASSES)"
            displayName: "Use Extracted Apex Classes"
